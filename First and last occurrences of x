vector<int> find(int arr[], int n , int x )
{
    // code here
    //this is a approach with basic iterative way
    int ans=-1;
    int index=-1;
    for(int i=0;i<n;i++){
        if(arr[i] ==x and ans==-1){
            ans =i;
            index =i;
        }
        else if(arr[i] ==x) index=i;
        
    }
    vector<int> v;
    v.push_back(ans);
    v.push_back(index);
    return v;
}

// another approach of solving by binary search worst time complexity(OlogN)

//
#include<bits/stdc++.h>
using namespace std;

vector<int> find(int a[], int n , int x )
{
    // code here
    // FIND FOR THE FIRST OCCURENCE
     int start=0;

    int end =n-1;

    int index1=-1;

    int index2=-1;

    vector<int>v;

    while(start<=end){

        int mid=start+(end-start)/2;

        if(x==a[mid]){

            index2=mid;

            start=mid+1;

            

        }else if(x<a[mid]){

            end=mid-1;

        }else{

            start=mid+1;

        }

    }
    // FIND FOR THE LAST OCCURENCE
    start=0;

    end =n-1;

    while(start<=end){

        int mid=start+(end-start)/2;

        if(x==a[mid]){

            index1=mid;

            end=mid-1;

            

        }else if(x<a[mid]){

            end=mid-1;

        }else{

            start=mid+1;

        }

    } 

    v.push_back(index1);

    v.push_back(index2);

    return v;
    
}



